// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: proto/cv.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CvService_ListAll_FullMethodName = "/CvService/ListAll"
)

// CvServiceClient is the client API for CvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CvServiceClient interface {
	ListAll(ctx context.Context, in *WhoAreYouParams, opts ...grpc.CallOption) (CvService_ListAllClient, error)
}

type cvServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCvServiceClient(cc grpc.ClientConnInterface) CvServiceClient {
	return &cvServiceClient{cc}
}

func (c *cvServiceClient) ListAll(ctx context.Context, in *WhoAreYouParams, opts ...grpc.CallOption) (CvService_ListAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &CvService_ServiceDesc.Streams[0], CvService_ListAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cvServiceListAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CvService_ListAllClient interface {
	Recv() (*Cv, error)
	grpc.ClientStream
}

type cvServiceListAllClient struct {
	grpc.ClientStream
}

func (x *cvServiceListAllClient) Recv() (*Cv, error) {
	m := new(Cv)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CvServiceServer is the server API for CvService service.
// All implementations must embed UnimplementedCvServiceServer
// for forward compatibility
type CvServiceServer interface {
	ListAll(*WhoAreYouParams, CvService_ListAllServer) error
	mustEmbedUnimplementedCvServiceServer()
}

// UnimplementedCvServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCvServiceServer struct {
}

func (UnimplementedCvServiceServer) ListAll(*WhoAreYouParams, CvService_ListAllServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedCvServiceServer) mustEmbedUnimplementedCvServiceServer() {}

// UnsafeCvServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CvServiceServer will
// result in compilation errors.
type UnsafeCvServiceServer interface {
	mustEmbedUnimplementedCvServiceServer()
}

func RegisterCvServiceServer(s grpc.ServiceRegistrar, srv CvServiceServer) {
	s.RegisterService(&CvService_ServiceDesc, srv)
}

func _CvService_ListAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WhoAreYouParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CvServiceServer).ListAll(m, &cvServiceListAllServer{stream})
}

type CvService_ListAllServer interface {
	Send(*Cv) error
	grpc.ServerStream
}

type cvServiceListAllServer struct {
	grpc.ServerStream
}

func (x *cvServiceListAllServer) Send(m *Cv) error {
	return x.ServerStream.SendMsg(m)
}

// CvService_ServiceDesc is the grpc.ServiceDesc for CvService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CvService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CvService",
	HandlerType: (*CvServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAll",
			Handler:       _CvService_ListAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cv.proto",
}
